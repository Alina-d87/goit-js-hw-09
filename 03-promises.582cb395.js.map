{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,qBAC9BE,KAAMH,SAASC,cAAc,oBAC7BG,OAAQJ,SAASC,cAAc,uBAEjCI,QAAQC,IAAIR,GAEZA,EAAKC,KAAKQ,iBAAiB,UAI3B,SAAkBC,GAChBA,EAAEC,iBACFC,EAAQZ,EAAKI,MAAMS,MACnBN,QAAQC,IAAII,GACZE,EAAOd,EAAKK,KAAKQ,MACjBN,QAAQC,IAAIM,GACZ,MAAMR,EAASN,EAAKM,OAAOO,MAC3BN,QAAQC,IAAIF,GACZM,EAAQG,OAAOC,SAASJ,GAASG,OAAOC,SAASF,GACjDP,QAAQC,IAAII,GAEZ,IAAK,IAAIK,EAAI,EAAGA,GAAKX,EAAQW,GAAK,EAAG,CAGnCC,EAFeD,EAESL,GACrBO,MAAK,EAACC,SAAEA,EAAQhB,MAAEA,KACjBiB,YAAW,KACTC,UACCR,KAEJS,OAAM,EAACH,SAAEA,EAAQhB,MAAEA,KAClBiB,YAAW,KACTG,SACCV,SA1BX,IAAIF,EAAQ,KACRE,EAAO,KA8BX,SAASI,EAAcE,EAAUK,GAC/B,OAAO,IAAIC,SAAQ,CAACJ,EAASE,KAC3B,MAAMG,EAAgBC,KAAKC,SAAW,GACtCR,YAAW,KACLM,EACFG,EAAAhC,GAASiC,OAAOC,QACd,uBAAqBZ,QAAiBK,OAGxCK,EAAAhC,GAASiC,OAAOE,QACd,sBAAoBb,QAAeK,SAGtCX","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n};\nconsole.log(refs);\n\nrefs.form.addEventListener('submit', onSubmit);\nlet delay = null;\nlet step = null;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  delay = refs.delay.value;\n  console.log(delay);\n  step = refs.step.value;\n  console.log(step);\n  const amount = refs.amount.value;\n  console.log(amount);\n  delay = Number.parseInt(delay) + Number.parseInt(step);\n  console.log(delay);\n\n  for (let i = 0; i <= amount; i += 1) {\n    let position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) =>\n        setTimeout(() => {\n          resolve;\n        }, step)\n      )\n      .catch(({ position, delay }) =>\n        setTimeout(() => {\n          reject;\n        }, step)\n      );\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      } else {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      }\n    }, step);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","console","log","addEventListener","e","preventDefault","$47d4ff9957288465$var$delay","value","$47d4ff9957288465$var$step","Number","parseInt","i","$47d4ff9957288465$var$createPromise","then","position","setTimeout","resolve","catch","reject","delay1","Promise","shouldResolve","Math","random","$parcel$interopDefault","Notify","success","failure"],"version":3,"file":"03-promises.582cb395.js.map"}