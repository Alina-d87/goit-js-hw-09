{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,qBAC9BE,KAAMH,SAASC,cAAc,oBAC7BG,OAAQJ,SAASC,cAAc,uBAEjCI,QAAQC,IAAIR,GAEZA,EAAKC,KAAKQ,iBAAiB,UAK3B,SAAkBC,GAChBA,EAAEC,iBACFC,EAAQZ,EAAKI,MAAMS,MACnBC,EAAOd,EAAKK,KAAKQ,MACjB,MAAMP,EAASN,EAAKM,OAAOO,MAE3B,IAAK,IAAIE,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAChCC,EAAWD,EACXH,EAAQK,OAAOC,SAASN,GAASK,OAAOC,SAASJ,GAEjDK,EAAcH,EAAUJ,GACrBQ,MAAK,EAAGC,SAAAC,EAAUlB,MAAAmB,MACjBC,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBJ,QAAiBC,MAAU,IAGnDI,OAAM,EAAGN,SAAAO,EAAUxB,MAAAyB,MAClBL,EAAA1B,GAAS2B,OAAOK,QACd,sBAAoBF,QAAiBC,MAAU,G,IAtBzD,IAEIb,EAFAJ,EAAQ,KACRE,EAAO,KA2BX,SAASK,EAAcY,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,CAAEb,SAAAU,EAAU3B,MAAA4B,IAEpBG,EAAO,CAAEd,SAAAU,EAAU3B,MAAA4B,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n};\nconsole.log(refs);\n\nrefs.form.addEventListener('submit', onSubmit);\nlet delay = null;\nlet step = null;\nlet position;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  delay = refs.delay.value;\n  step = refs.step.value;\n  const amount = refs.amount.value;\n\n  for (let i = 0; i <= amount; i += 1) {\n    position = i;\n    delay = Number.parseInt(delay) + Number.parseInt(step);\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//createPromise(position, delay)\n//  .then(({ position, delay }) => {\n//    Notiflix.Notify.success(\n//      `✅ Fulfilled promise ${console.log(position)} in ${console.log(delay)}ms`\n//    );\n//  })\n//  .catch(({ position, delay }) => {\n//    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//  });\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","console","log","addEventListener","e","preventDefault","$47d4ff9957288465$var$delay","value","$47d4ff9957288465$var$step","i","$47d4ff9957288465$var$position","Number","parseInt","$47d4ff9957288465$var$createPromise","then","position","position1","delay1","$parcel$interopDefault","Notify","success","catch","position2","delay2","failure","position3","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.d787fe60.js.map"}