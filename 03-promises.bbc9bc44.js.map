{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,qBAC9BE,KAAMH,SAASC,cAAc,oBAC7BG,OAAQJ,SAASC,cAAc,uBAMjC,IAAII,EA8BJ,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAYd,EAAKK,KAAKU,MAC5BC,QAAQC,IAAIH,GAWZ,OATgB,IAAII,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLV,EACFQ,EAAQ,uBAAqBV,QAAiBC,OAE5CU,EAAK,sBAAoBX,QAAeC,SAE3CI,MA9CPE,QAAQC,IAAIjB,GAEZA,EAAKC,KAAKqB,iBAAiB,UAI3B,SAAkBC,GAChBA,EAAEC,iBACF,MAAMC,EAAczB,EAAKM,OAAOS,MAChCC,QAAQC,IAAIQ,GACZ,MAAMC,EAAa1B,EAAKI,MAAMW,MAC9BC,QAAQC,IAAIS,GAEZ,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrCpB,EAAWoB,EAEXnB,EAAcD,EAAUmB,GACrBE,MAAK,EAAGC,SAAAC,EAAQpB,WAAEA,MACjBqB,EAAAjC,GAASkC,OAAOC,QACd,uBAAqBH,QAAiBpB,UAIzCwB,OAAM,EAAGL,SAAAM,EAAQzB,WAAEA,MAClBqB,EAAAjC,GAASkC,OAAOI,QACd,sBAAoBD,QAAiBzB,UAM7Ca,EAAEc,OAAOC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n};\nconsole.log(refs);\n\nrefs.form.addEventListener('submit', onSubmit);\n\nlet position;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const inputAmount = refs.amount.value;\n  console.log(inputAmount);\n  const inputDelay = refs.delay.value;\n  console.log(inputDelay);\n\n  for (let i = 0; i <= inputAmount; i += 1) {\n    position = i;\n\n    createPromise(position, inputDelay)\n      .then(({ position, inputDelay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${inputDelay}ms`\n        );\n        return;\n      })\n      .catch(({ position, inputDelay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${inputDelay}ms`\n        );\n        return;\n      });\n  }\n\n  e.target.reset();\n}\n\nfunction createPromise(position, inputDelay) {\n  const shouldResolve = Math.random() > 0.3;\n  const inputStep = refs.step.value;\n  console.log(inputStep);\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${inputDelay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${inputDelay}ms`);\n      }\n    }, inputStep);\n  });\n  return promise;\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$position","$47d4ff9957288465$var$createPromise","position3","inputDelay","shouldResolve","Math","random","inputStep","value","console","log","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","inputAmount","inputDelay1","i","then","position","position1","$parcel$interopDefault","Notify","success","catch","position2","failure","target","reset"],"version":3,"file":"03-promises.bbc9bc44.js.map"}