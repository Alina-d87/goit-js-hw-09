{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,qBAC9BE,KAAMH,SAASC,cAAc,oBAC7BG,OAAQJ,SAASC,cAAc,uBAoCjC,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAYT,EAAKK,KAAKK,MAG5B,OAFAC,QAAQC,IAAIH,GAEL,IAAII,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAwCK,OAAfX,EAAS,QAAYW,OAANf,EAAM,OAEpDW,EAAK,sBAAqCI,OAAfX,EAAS,QAAYW,OAANf,EAAM,SAEnDK,MA9CPE,QAAQC,IAAIZ,GAEZA,EAAKC,KAAKmB,iBAAiB,UAI3B,SAAkBC,GAChBA,EAAEC,iBACF,IAAMhB,EAASN,EAAKM,OAAOI,MAC3BC,QAAQC,IAAIN,GACZ,IAAIiB,EAAQvB,EAAKI,MAAMM,MACvBC,QAAQC,IAAIW,GAEZ,IAAK,IAAIC,EAAI,EAAGA,GAAKlB,EAAQkB,GAAK,EAGhCjB,EAFWiB,EAEaD,GACrBE,MAAK,SAAAC,G,IAAGC,EAAQD,EAARE,SAAUxB,EAAKsB,EAALtB,MACjByB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCZ,OAAfQ,EAAS,QAAYR,OAANf,EAAM,UAIjD4B,OAAM,SAAAN,G,IAAGO,EAAQP,EAARE,SAAUxB,EAAKsB,EAALtB,MAClByB,EAAA/B,GAASgC,OAAOI,QACd,sBAAuCf,OAAfc,EAAS,QAAYd,OAANf,EAAM,UAMrDiB,EAAEc,OAAOC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n};\nconsole.log(refs);\n\nrefs.form.addEventListener('submit', onSubmit);\n\nlet position;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const amount = refs.amount.value;\n  console.log(amount);\n  let delay = refs.delay.value;\n  console.log(delay);\n\n  for (let i = 0; i <= amount; i += 1) {\n    position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        return;\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        return;\n      });\n  }\n\n  e.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  const inputStep = refs.step.value;\n  console.log(inputStep);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, inputStep);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position3","inputStep","value","console","log","Promise","resolve","reject","setTimeout","Math","random","concat","addEventListener","e","preventDefault","delay1","i","then","param","position1","position","$parcel$interopDefault","Notify","success","catch","position2","failure","target","reset"],"version":3,"file":"03-promises.1df04b57.js.map"}