{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,qBAC9BE,KAAMH,SAASC,cAAc,oBAC7BG,OAAQJ,SAASC,cAAc,uBAEjCI,QAAQC,IAAIR,GAEZA,EAAKC,KAAKQ,iBAAiB,UAK3B,SAAkBC,GAChBA,EAAEC,iBACFC,EAAQZ,EAAKI,MAAMS,MACnBC,EAAOd,EAAKK,KAAKQ,MAGjB,IAFA,IAAMP,EAASN,EAAKM,OAAOO,MAElBE,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAChCC,EAAWD,EACXH,EAAQK,OAAOC,SAASN,GAASK,OAAOC,SAASJ,GAEjDK,EAAcH,EAAUJ,GACrBQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARE,SAAUC,EAAKH,EAALjB,MACjBqB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAwCC,OAAfN,EAAS,QAAYM,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAR,G,IAAGS,EAAQT,EAARE,SAAUQ,EAAKV,EAALjB,MAClBqB,EAAA3B,GAAS4B,OAAOM,QACd,sBAAuCJ,OAAfE,EAAS,QAAYF,OAANG,EAAM,M,OAtBvD,IAEIf,EAFAJ,EAAQ,KACRE,EAAO,KA2BX,SAASK,EAAcc,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEb,SAAAU,EAAU7B,MAAA8B,IAEpBG,EAAO,CAAEd,SAAAU,EAAU7B,MAAA8B,G,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n};\nconsole.log(refs);\n\nrefs.form.addEventListener('submit', onSubmit);\nlet delay = null;\nlet step = null;\nlet position;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  delay = refs.delay.value;\n  step = refs.step.value;\n  const amount = refs.amount.value;\n\n  for (let i = 0; i <= amount; i += 1) {\n    position = i;\n    delay = Number.parseInt(delay) + Number.parseInt(step);\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//createPromise(position, delay)\n//  .then(({ position, delay }) => {\n//    Notiflix.Notify.success(\n//      `✅ Fulfilled promise ${console.log(position)} in ${console.log(delay)}ms`\n//    );\n//  })\n//  .catch(({ position, delay }) => {\n//    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//  });\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","console","log","addEventListener","e","preventDefault","$ce04d3a99e08e73b$var$delay","value","$ce04d3a99e08e73b$var$step","i","$ce04d3a99e08e73b$var$position","Number","parseInt","$ce04d3a99e08e73b$var$createPromise","then","param","position1","position","delay1","$parcel$interopDefault","Notify","success","concat","catch","position2","delay2","failure","position3","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.a6c3c0df.js.map"}